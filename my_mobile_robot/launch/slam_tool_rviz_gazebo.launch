<launch>
<!-- Arguments -->
<arg name="paused" default="false"/>
<arg name="use_sim_time" default="true"/>
<arg name="gui" default="true"/>
<arg name="headless" default="false"/>
<arg name="debug" default="false"/>
<arg name="gui_required" default="true"/>
<arg name="mesh_enabled" default="true"/>

<arg name="robot_namespace" default="/"/>

<include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find my_mobile_robot)/world/Project.world" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="use_sim_time" value="$(arg use_sim_time)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="headless" value="$(arg headless)" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="verbose" default="false" />
    <arg name="gui_required" value="$(arg gui_required)" />
</include>

<group ns="$(arg robot_namespace)">

    <param name="robot_description" command="$(find xacro)/xacro '$(find my_mobile_robot)/urdf/robot.urdf.xacro'
        --inorder  mesh_enabled:=$(arg mesh_enabled)" />

    <node name="ds_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="  -z 0.18
                    -urdf 
                    -param robot_description 
                    -model $(arg robot_namespace)" />


    <rosparam command="load" file="$(find my_mobile_robot)/config/control_diff.yaml" />

    <node name="base_controller_spawner" pkg="controller_manager" type="spawner" 
            args="  joint_state_controller
                    velocity_controller
                            "/>

    <!-- node name="modify_scan" pkg="my_mobile_robot" type="pub_scan">
    </node>-->

    <!-- <node name="rviz" pkg= "rviz" type = "rviz" output="screen" /> -->
    <!-- <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find my_mobile_robot)/rviz/my_robot_config.rviz" /> -->

</group>

 
 <arg name="set_base_frame" default="base_link"/>
 <arg name="set_odom_frame" default="odom"/>
 <arg name="set_map_frame" default="map"/>
 <arg name="scan_topic" default="/new_scan"/>
 
 
    <!-- URDF model -->
 <param name="robot_description" command="$(find xacro)/xacro '$(find my_mobile_robot)/urdf/robot.urdf.xacro'" />
 
 
    <!-- joint state publisher -->
 <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
 <param name="use_gui" value="False"/>
 </node>  
 
 
    <!--Publish robot state and transforms-->
 <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"></node>
 
 
<!-- <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser4"
 args="0.0 0.0 0.2 0 0.0 0.0 /base_link /laser_frame 40" /> -->
 
   
 
 <!-- LASER scan matcher -->
<!-- <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher_node" output="screen">
<param name="max_iterations" value="20"/>
<param name="fixed_frame" value="map"/>
</node> -->

 <!-- <node pkg="rf2o_laser_odometry" type="rf2o_laser_odometry_node" name="rf2o_laser_odometry" output="screen">
    <param name="laser_scan_topic" value="/scan"/>        # topic where the lidar scans are being published
    <param name="odom_topic" value="/odom" />              # topic where tu publish the odometry estimations
    <param name="publish_tf" value="true" />                   # wheter or not to publish the tf::transform (base->odom)
    <param name="base_frame_id" value="base_link"/>            # frame_id (tf) of the mobile robot base. A tf transform from the laser_frame to the base_frame is mandatory
    <param name="odom_frame_id" value="odom" />                # frame_id (tf) to publish the odometry estimations    
    <param name="init_pose_from_topic" value="" /> 		  # (Odom topic) Leave empty to start at point (0,0)
    <param name="freq" value="6.0"/>                            # Execution frequency.
    <param name="verbose" value="true" />                       # verbose
</node> -->
 
    <!-- SLAM Toolbox -->
 <node pkg="slam_toolbox" type="async_slam_toolbox_node" name="slam_toolbox" output="screen">
 <rosparam command="load" file="$(find my_mobile_robot)/config/mapper_params_online_async.yaml" />
 </node>

<node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find my_mobile_robot)/rviz/my_robot_config.rviz" />
 </launch>
 
